#!/bin/sh
# This script reads env variables (see below) and output/images/qemu.cfg
# to start a single Qemu instance for your target platform.  You can use
# the Qemu from your Linux distribution or the host package in Buildroot.
#
# Since the one built by Buildroot likely doesn't have capabilities set,
# you have to set 'QEMU_NET=user', to allow running as regular user, or
# use 'sudo make run'.  The 'QEMU_NET=bridge' mode doesn't work unless
# the bridge helper has the correct capabilities set, and a valid bridge
# set in /etc/qemu/bridge.conf or $O/host/etc/qemu/bridge.conf
#
# shellcheck disable=SC2039

usage()
{
    cat <<EOF
Usage:
    qemu [-f qemu.cfg]
or
    qemu KERNEL INITRD

Environment variables that impact qemu:

    QEMU_ARCH - QEMU arch
	     *: Launch QEMU as qemu-system-\${QEMU_ARCH}
       default: None, mandatory

    QEMU_MACH - QEMU machine, with optional machine extras
	     *: Argument to QEMU -M \${QEMU_MACH}
       default: None, mandatory

    V - Show kernel boot messages
	   "1": Show boot messages
	     *: Silent kernel boot

    QEMU_APPEND - Commandline options to pass to the kernel
       default: None

    QEMU_DTB - Path to device tree to use
       default: No device tree

    QEMU_EXTRA - Commandline options to pass to QEMU
       default: None

    QEMU_GDB - Enable kernel & user GDB connections to target
       default: Disabled

    QEMU_GDB_KPORT - TCP port to listen for GDB connections to kernel
       default: 4711

    QEMU_GDB_KWAIT - Wait for user to attach to kernel before booting
       default: Don't wait

    QEMU_GDB_UPORT - TCP port to listen for GDB connections to userspace
       default: 4712

    QEMU_MNT - JFFS2 image to mount as /mnt
       default: None

    QEMU_HOST - Directory to passthrough-mount (9p) as /host
       default: None

    QEMU_N_NICS - Number of Network adapters
       default: 1

    QEMU_NIC - Network adapter model
       default: virtio-net

    QEMU_NET - Network mode
      "bridge": Bridge the quests interface to the host's QEMU_BRIDGE
	 "tap": Guest interface is exported as exported to host as qtap
        "user": User (NAT) networking, no root or capabilities required,
                note, only a single interface is created
       default: "bridge"

    QEMU_BRIDGE - Host-side bridge to attach interfaces to
       default: "virbr0"

EOF
}

# Return ${2} if set, else ${1}
default()
{
    [ -z ${2} ] && echo ${1} || echo ${2}
}

# The following options can be set in QEMU_APPEND.  Notice how
# options to PID 1 (init) should added last, and be separated
# with a ' -- ' from the kernel options.
#
# Kernel options:
#   debug                -- enable (some) kernel debug messages
#   quiet                -- no kernel logs, except for warnings + errors
#   loglevel=7           -- enable full kernel debug, at this level Finit
#                           will not disable kernel logs to console.  But
#                           your syslogd likely will (disable that too)
# Init options:
#   rescue               -- enter rescue mode, bypasses all .conf files
#   single, or S         -- enter single user mode, runlevel 1 or
#   finit.debug=1        -- enable verbose debug messages
#   finit.show_status=0  -- disable progress output
#
append_args()
{
    if [ "${V}" != "1" ]; then
	echo -n "quiet "
    else
	echo -n "debug "
    fi

    echo -n "console=hvc0 "

    if [ "${1}" = "-r" ]; then
	# Size of initrd, rounded up to nearest kb
	size=$((($(find "${2}" -printf %s)+1023) >> 10))
	echo -n "root=/dev/ram ramdisk_size=${size} "
	echo -n "block2mtd.block2mtd=/dev/sda,,Config "
    else
	echo -n "root=/dev/vda "
    fi

    echo -n "${QEMU_APPEND} "
}

dtb_args()
{
    if [ -z "${QEMU_DTB}" ]; then
	return
    fi

    echo -n "-dtb ${IMAGEDIR}/${QEMU_DTB}"
}

mnt_args()
{
    if [ -z "${QEMU_MNT}" ]; then
	[ -d ~/.cache ] || return
	QEMU_MNT=~/.cache/${NETBOX_VENDOR_ID}-config-${NETBOX_PLAT}.img

	# Transitional, rename any netbox-foo.img -> netbox-config-foo.img
	old=~/.cache/${NETBOX_VENDOR_ID}-${NETBOX_PLAT}.img
	[ -f $old ] && mv $old $QEMU_MNT
    fi

    if [ ! -e "${QEMU_MNT}" ]; then
	dd if=/dev/zero bs=16384 count=960 2>/dev/null | tr '\000' '\377' > "${QEMU_MNT}"
    fi

    echo -n "-device ${QEMU_SCSI},id=scsi0 "
    echo -n "-device scsi-hd,bus=scsi0.0,drive=drive0 "
    echo -n "-drive file=${QEMU_MNT},if=none,format=raw,discard=unmap,id=drive0 "
}

host_args()
{
    [ -z "${QEMU_HOST}" ] && return

    echo -n "-virtfs local,path=${QEMU_HOST},security_model=none,writeout=immediate,mount_tag=hostfs "
}

net_args()
{
    brname=${QEMU_BRIDGE:-virbr0}
    model=${QEMU_NIC}
    mode=${QEMU_NET:-bridge}

    if [ "${mode}" = "user" ]; then
	/bin/echo -n "-net nic,model=virtio -net user "
	return
    fi

    for n in $(seq 0 $((${QEMU_N_NICS:-1} - 1)) ); do
	if [ "${mode}" = "bridge" -a ${n} -eq 0 ]; then
	    # new style -nic config allows no ifname in bridged mode
	    echo -n "-nic bridge,br=${brname}"
	else
	    # ignore any enslave script for unbridged ports
	    echo -n "-nic tap,ifname=qtap${n},script=no"
	fi

	# Use qemu-system default if no model is given
	if [ -n "${model}" ]; then
	    echo -n ",model=${model} "
	else
	    echo -n " "
	fi
    done
}

consle_args()
{
    echo -n "-device virtio-serial "

    echo -n "-chardev stdio,mux=on,id=hvc0 "
    echo -n "-device virtconsole,chardev=hvc0 "

    echo -n "-mon chardev=hvc0 "
}

gdb_args()
{
    if [ -z "$QEMU_GDB" ]; then
	return
    fi

    echo -n "-gdb tcp::${QEMU_GDB_KPORT:-4711} "
    if [ -n "${QEMU_GDB_KWAIT}" ]; then
        echo -n "-S "
    fi

    addr="port=${QEMU_GDB_UPORT:-4712},host=localhost"
    echo -n "-chardev socket,id=hvc1,${addr},server=on,wait=off "
    echo -n "-device virtconsole,name=gdb,chardev=hvc1"
}

# Assume available from current directory
dir=.
cfg=qemu.cfg

case $1 in
    -f)
	if [ ! -r $2 ]; then
	    echo "qemu: Cannot start, this is not an OS build, missing kernel."
	    echo "qemu: Build using OS flavor, or check your \$O"
	    exit 1
	fi
	dir=$(dirname $2)
	cfg=$(basename $2)
	;;
    *)
	QEMU_KERNEL=$1
	QEMU_MACH=$2
	;;
esac

# Source default or -f config
if [ -z "${QEMU_MACH}"  -o -z "${QEMU_KERNEL}" ]; then
    . "$dir/$cfg"
    if [ -n "${QEMU_SYSTEM_PATH}" ]; then
	export PATH="${QEMU_SYSTEM_PATH}:${PATH}"
    fi
fi

if [ -z "${QEMU_ARCH}" -o -z "${QEMU_MACH}"  -o -z "${QEMU_KERNEL}" ]; then
    echo "qemu: One or more of the following are missing"
    echo "QEMU_ARCH   : $QEMU_ARCH"
    echo "QEMU_MACH   : $QEMU_MACH"
    echo "QEMU_KERNEL : $QEMU_KERNEL"
    exit 1;
fi

# Disable pulseaudio warning
export QEMU_AUDIO_DRV=none

echo "Starting Qemu  ::  Ctrl-a x -- exit | Ctrl-a c -- toggle console/monitor"

# Save current line settings, then disable all of them so that
# everything is passed through to the guest (C-c, C-z etc.).
line=$(stty -g)
stty raw

# Start Qemu
if [ -n "${QEMU_INITRD}" ]; then
    qemu-system-${QEMU_ARCH} -display none -m 256M		\
		-M ${QEMU_MACH} ${QEMU_EXTRA}			\
		-kernel ${QEMU_KERNEL} -initrd ${QEMU_INITRD} 	\
		-append "$(append_args -r ${QEMU_INITRD})"	\
		$(dtb_args) $(mnt_args) $(host_args) $(net_args)\
		$(consle_args) $(gdb_args)
else
    qemu-system-${QEMU_ARCH} -display none -m 256M		\
		-M ${QEMU_MACH} ${QEMU_EXTRA}			\
		-kernel ${QEMU_KERNEL}				\
    		-drive file=${QEMU_DISK},if=virtio,format=raw	\
		-append "$(append_args -d ${QEMU_DISK})"	\
		$(dtb_args) $(mnt_args) $(host_args) $(net_args)\
		$(consle_args) $(gdb_args)
fi
rc=$?

# Restore TTY from Qemu target
stty "${line}"

if [ $rc -ne 0 ]; then
    echo "\e[1m** Check your QEMU_ variables, e.g QEMU_GDB*, QEMU_MNT, etc.\e[0m"
    echo "\e[1m** For details, see $0\e[0m"
fi

exit $rc
